{"version":3,"sources":["components/Quote.js","App.js","serviceWorker.js","index.js"],"names":["Quote","parentCb","newQuote","Quotes","getQuote","useState","quote","setQuote","bgColor","setColor","style1","color","style2","backgroundColor","id","style","text","author","href","target","rel","className","icon","faTwitter","size","onClick","r","Math","floor","random","g","b","App","bg","setBg","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8UA8DeA,G,MAvDD,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACXC,EAAWC,IAAOC,WADQ,EAEJC,mBAASH,GAFL,mBAEvBI,EAFuB,KAEhBC,EAFgB,OAGFF,mBAAS,sBAHP,mBAGvBG,EAHuB,KAGdC,EAHc,KAqBxBC,EAAS,CACbC,MAAOH,GAGHI,EAAS,CACbC,gBAAiBL,GAGnB,OACE,yBAAKM,GAAG,YAAYC,MAAOL,GACzB,wBAAII,GAAG,QAAQR,EAAMU,MACrB,uBAAGF,GAAG,UAAUR,EAAMW,QACtB,uBACEC,KAAI,sFAAkFZ,EAAMU,KAAxF,aAAkGV,EAAMW,QAC5GE,OAAO,SACPC,IAAI,sBACJN,GAAG,eAEH,4BAAQO,UAAU,yBAAyBN,MAAOH,GAChD,kBAAC,IAAD,CAAiBU,KAAMC,IAAWC,KAAK,KAAKb,MAAM,YAGtD,4BACEG,GAAG,YACHO,UAAU,eACVI,QAxCkB,WACtBlB,EAAS,eAAKJ,IAAOC,aAErB,IAAMsB,EAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,SAAiB,IACzCC,EAAIH,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBE,EAAIJ,KAAKC,MAAsB,IAAhBD,KAAKE,UAKtB5B,EADc,CAAEyB,IAAGI,IAAGC,MAGtBtB,EAAS,OAAD,OAAQiB,EAAR,aAAcI,EAAd,aAAoBC,EAApB,OA6BJhB,MAAOH,GAJT,gBC1BSoB,EApBH,WAAO,IAAD,EACI3B,mBAAS,sBADb,mBACT4B,EADS,KACLC,EADK,KAQVnB,EAAQ,CACZF,gBAAiBoB,GAGnB,OACE,yBAAKZ,UAAU,MAAMN,MAAOA,GAC1B,kBAAC,EAAD,CAAOd,SAXM,SAAAU,GAAU,IACjBe,EAAYf,EAAZe,EAAGI,EAASnB,EAATmB,EAAGC,EAAMpB,EAANoB,EACdG,EAAM,OAAD,OAAQR,EAAR,aAAcI,EAAd,aAAoBC,EAApB,SAUH,wCCPcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a4592e86.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport Quotes from \"inspirational-quotes\";\r\n\r\nimport \"./Quote.css\";\r\n\r\nconst Quote = ({ parentCb }) => {\r\n  let newQuote = Quotes.getQuote();\r\n  const [quote, setQuote] = useState(newQuote);\r\n  const [bgColor, setColor] = useState(\"rgb(255, 105, 100)\");\r\n  // let { text, author } = quote;\r\n\r\n  const getQuoteHandler = () => {\r\n    setQuote({ ...Quotes.getQuote() });\r\n\r\n    const r = Math.floor(Math.random() * 200 + 56),\r\n      g = Math.floor(Math.random() * 150),\r\n      b = Math.floor(Math.random() * 200);\r\n\r\n    // console.log(quote);\r\n\r\n    const color = { r, g, b };\r\n    parentCb(color);\r\n\r\n    setColor(`rgb(${r}, ${g}, ${b})`);\r\n  };\r\n\r\n  const style1 = {\r\n    color: bgColor\r\n  };\r\n\r\n  const style2 = {\r\n    backgroundColor: bgColor\r\n  };\r\n\r\n  return (\r\n    <div id=\"quote-box\" style={style1}>\r\n      <h4 id=\"text\">{quote.text}</h4>\r\n      <p id=\"author\">{quote.author}</p>\r\n      <a\r\n        href={`https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=\\\"${quote.text}\\\" ${quote.author}`}\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n        id=\"tweet-quote\"\r\n      >\r\n        <button className=\"quote-button btn-tweet\" style={style2}>\r\n          <FontAwesomeIcon icon={faTwitter} size=\"lg\" color=\"white\" />\r\n        </button>\r\n      </a>\r\n      <button\r\n        id=\"new-quote\"\r\n        className=\"quote-button\"\r\n        onClick={getQuoteHandler}\r\n        style={style2}\r\n      >\r\n        New Quote\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Quote;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Quote from \"./components/Quote\";\n\nconst App = () => {\n  const [bg, setBg] = useState(\"rgb(255, 105, 100)\");\n\n  const callback = color => {\n    const { r, g, b } = color;\n    setBg(`rgb(${r}, ${g}, ${b})`);\n  };\n\n  const style = {\n    backgroundColor: bg\n  };\n\n  return (\n    <div className=\"App\" style={style}>\n      <Quote parentCb={callback} />\n      <p>by Raga</p>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}